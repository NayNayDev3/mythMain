{"version":3,"sources":["../node_modules/fast-deep-equal/index.js","../../src/messages.ts","../../src/interfaces.ts","../../src/config.ts","../../src/loglevel.ts","../../src/utils.ts","../../src/baseProvider.ts","../../src/embedUtils.ts","../../src/PopupHandler.ts","../../src/communicationProvider.ts","../../src/inPageProvider.ts","../../src/siteMetadata.ts","../../src/embed.ts","../../src/index.ts","../node_modules/@toruslabs/solana-embed/node_modules/is-stream/index.js","../../src/chain/IChainInterface.ts","../../src/chain/config.ts","../../src/errors/index.ts","../../src/wallet/index.ts","../../src/adapter/IAdapter.ts","../../src/solanaWalletAdapter.ts"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","window","loglevel","getWindowId","Math","getTorusUrl","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","h","dualScreenLeft","dualScreenTop","document","left","top","w","getNetworkConfig","label","blockExplorerUrl","displayName","logo","rpcTarget","ticker","tickerName","connectionStream","jsonRpcStreamName","isDuplexStream","messages","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","req","res","message","data","next","done","error","log","createLoggerMiddleware","origin","location","request","args","params","getRpcPromiseCallback","send","sendAsync","_handleStreamDisconnect","remoteLabel","emitter","warningMsg","logStreamDisconnectWarning","handleEvent","handlerArgs","handlerWrapper","handler","handle","resolve","htmlToElement","html","template","trimmedHtml","features","target","_setupTimer","Number","setInterval","clearInterval","open","Promise","close","redirect","TorusCommunicationProvider","languageTranslations","configuration","userLanguage","userLanguages","config","getUserLanguage","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","url","currentLoginProvider","isLoggedIn","isIFrameFullScreen","isConnected","_initializeState","torusIframe","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","handledWindow","windowId","_displayIframe","style","hideTorusButton","showTorusButton","_rpcRequest","cb","_payload","_handleConnect","_handleDisconnect","errorMessage","_handleCloseWindow","_createPopupBlockAlert","logoUrl","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","buttonPosition","hasEmittedConnection","torusWidgetVisibility","initialized","isPermanentlyDisconnected","TorusInPageProvider","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","accounts","isInternal","callback","_handleAccountsChanged","isEthAccounts","finalAccounts","dequal","_handleChainChanged","_handleUnlockStateChanged","img","reject","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","getSiteIcon","name","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","type","storage","x","e","storageAvailable","torusIframeHtml","modalZIndex","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","dappStorageKey","torusIframeUrl","hashParams","handleSetup","dappMetadata","network","login","logout","cleanUp","clearInit","element","isElement","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","provider","topupResponse","sendTransaction","requireAllSignatures","response","signTransaction","buf","Buffer","sendTx","Transaction","signAllTransactions","encodedTransactions","allSignedTransaction","msg","signMessage","getGaslessPublicKey","handleDappStorageKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","communicationProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","err","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","torusAlertContainer","levels","apiKey_","isStream","stream","pipe","writable","_write","_writableState","isWritableStream","readable","_read","_readableState","isReadableStream","CHAIN_NAMESPACES","EIP155","SOLANA","ADAPTER_NAMESPACES","MULTICHAIN","DEFAULT_INFURA_ID","getChainConfig","finalChainId","parseInt","chainNamespace","getDefaultNetworkId","blockExplorer","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","code","value","toJSON","JSON","CustomError","WalletInitializationError","fromCode","extraMessage","notFound","notInstalled","notReady","windowBlocked","windowClosed","incompatibleChainNameSpace","duplicateAdapterError","invalidProviderConfigError","providerNotReadyError","rpcConnectionError","invalidParams","invalidNetwork","WalletLoginError","connectionError","disconnectionError","notConnectedError","popupClosed","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","TORUS_SOLANA","PHANTOM","EVM_ADAPTERS","TORUS_EVM","METAMASK","WALLET_ADAPTERS","ADAPTER_CATEGORY","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","ADAPTER_DATA_UPDATED","BaseAdapter","chainConfigProxy","setChainConfig","customChainConfig","defaultChainConfig","setAdapterSettings","checkConnectionRequirements","checkInitializationRequirements","updateAdapterData","adapterName","SafeEventEmitter","SolanaWalletAdapter","chainConfig","options","connect","this","adapter","reconnected","rehydrated","disconnect","cleanup","userInfo"],"mappings":"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","file":"static/js/13.faf84fcd.chunk.js","sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n","export function isStream(stream) {\n\treturn stream !== null\n\t\t&& typeof stream === 'object'\n\t\t&& typeof stream.pipe === 'function';\n}\n\nexport function isWritableStream(stream) {\n\treturn isStream(stream)\n\t\t&& stream.writable !== false\n\t\t&& typeof stream._write === 'function'\n\t\t&& typeof stream._writableState === 'object';\n}\n\nexport function isReadableStream(stream) {\n\treturn isStream(stream)\n\t\t&& stream.readable !== false\n\t\t&& typeof stream._read === 'function'\n\t\t&& typeof stream._readableState === 'object';\n}\n\nexport function isDuplexStream(stream) {\n\treturn isWritableStream(stream)\n\t\t&& isReadableStream(stream);\n}\n\nexport function isTransformStream(stream) {\n\treturn isDuplexStream(stream)\n\t\t&& typeof stream._transform === 'function';\n}\n","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { SafeEventEmitter } from '@toruslabs/openlogin-jrpc';\nimport { CustomError } from 'ts-custom-error';\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\"\n};\nconst ADAPTER_NAMESPACES = _objectSpread$2(_objectSpread$2({}, CHAIN_NAMESPACES), {}, {\n  MULTICHAIN: \"multichain\"\n});\n\nconst DEFAULT_INFURA_ID = \"776218ac4734478c90191dde8cae483c\";\n\nconst getDefaultNetworkId = chainNamespace => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n\n  throw new Error(\"Chain namespace \".concat(chainNamespace, \" is not supported\"));\n};\n\nconst getEvmChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://mainnet.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://ropsten.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"ropsten\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: \"https://rinkeby.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"rinkeby\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: \"https://goerli.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"goerli\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 42) {\n    return {\n      chainNamespace,\n      chainId: \"0x2a\",\n      rpcTarget: \"https://kovan.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"kovan\",\n      blockExplorer: \"https://kovan.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 137) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://polygon-rpc.com\",\n      blockExplorer: \"https://polygonscan.com\",\n      chainId: \"0x89\",\n      displayName: \"Polygon Mainnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 80001) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://rpc-mumbai.maticvigil.com\",\n      blockExplorer: \"https://mumbai-explorer.matic.today\",\n      chainId: \"0x13881\",\n      displayName: \"Polygon Mumbai Testnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 56) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://bsc-dataseed.binance.org\",\n      blockExplorer: \"https://bscscan.com\",\n      chainId: \"0x38\",\n      displayName: \"Binance SmartChain Mainnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  } else if (chainId === 97) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://data-seed-prebsc-2-s3.binance.org:8545\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      chainId: \"0x61\",\n      displayName: \"Binance SmartChain Testnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  }\n\n  return null;\n};\nconst getSolanaChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      blockExplorer: \"https://explorer.solana.com\",\n      chainId: \"0x1\",\n      displayName: \"Solana Mainnet\",\n      rpcTarget: \"https://api.mainnet-beta.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana Token\"\n    };\n  } else if (chainId === 2) {\n    return {\n      rpcTarget: \"https://api.testnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      chainId: \"0x2\",\n      chainNamespace,\n      displayName: \"testnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  } else if (chainId === 3) {\n    return {\n      rpcTarget: \"https://api.devnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      chainId: \"0x3\",\n      chainNamespace,\n      displayName: \"devnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  }\n\n  return null;\n};\nconst getChainConfig = (chainNamespace, chainId) => {\n  const finalChainId = chainId ? typeof chainId === \"number\" ? chainId : parseInt(chainId, 16) : getDefaultNetworkId(chainNamespace);\n\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n\n  return null;\n};\n\nclass Web3AuthError extends CustomError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.code = code;\n    this.message = message || \"\"; // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"Web3AuthError\"\n    });\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}\nclass WalletInitializationError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletInitializationError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletInitializationError(code, \"\".concat(WalletInitializationError.messages[code], \", \").concat(extraMessage));\n  } // Custom methods\n\n\n  static notFound() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  static notInstalled() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  static notReady() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  static windowBlocked() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  static windowClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  static incompatibleChainNameSpace() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  static duplicateAdapterError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  static invalidProviderConfigError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  static providerNotReadyError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  static rpcConnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  static invalidParams() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  static invalidNetwork() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n\n}\n/**\n * wallet login errors\n */\n\n_defineProperty(WalletInitializationError, \"messages\", {\n  5000: \"Custom\",\n  5001: \"Wallet is not found\",\n  5002: \"Wallet is not installed\",\n  5003: \"Wallet is not ready yet\",\n  5004: \"Wallet window is blocked\",\n  5005: \"Wallet window has been closed by the user\",\n  5006: \"Incompatible chain namespace provided\",\n  5007: \"Adapter has already been included\",\n  5008: \"Invalid provider Config\",\n  5009: \"Provider is not ready yet\",\n  5010: \"Failed to connect with rpc url\",\n  5011: \"Invalid params passed in\",\n  5013: \"Invalid network provided\"\n});\n\nclass WalletLoginError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletLoginError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletLoginError(code, \"\".concat(WalletLoginError.messages[code]).concat(extraMessage));\n  }\n\n  static connectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  static disconnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  static notConnectedError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  static popupClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n}\n\n_defineProperty(WalletLoginError, \"messages\", {\n  5000: \"Custom\",\n  5111: \"Failed to connect with wallet\",\n  5112: \"Failed to disconnect from wallet\",\n  5113: \"Wallet is not connected\",\n  5114: \"Wallet popup has been closed by the user\"\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\"\n};\nconst SOLANA_ADAPTERS = _objectSpread$1({\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\"\n}, MULTI_CHAIN_ADAPTERS);\nconst EVM_ADAPTERS = _objectSpread$1({\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\"\n}, MULTI_CHAIN_ADAPTERS);\nconst WALLET_ADAPTERS = _objectSpread$1(_objectSpread$1({}, EVM_ADAPTERS), SOLANA_ADAPTERS);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\"\n};\nconst ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\"\n};\nconst ADAPTER_EVENTS = _objectSpread(_objectSpread({}, ADAPTER_STATUS), {}, {\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\"\n});\nclass BaseAdapter extends SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"adapterData\", {});\n\n    _defineProperty(this, \"chainConfig\", null);\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  setChainConfig(customChainConfig) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = _objectSpread(_objectSpread({}, defaultChainConfig), customChainConfig);\n  }\n\n  setAdapterSettings(_) {}\n\n  checkConnectionRequirements() {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY) throw WalletLoginError.connectionError(\"Wallet adapter is not ready yet\");\n  }\n\n  checkInitializationRequirements() {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data) {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, {\n      adapterName: this.name,\n      data\n    });\n  }\n\n}\n\nconst PROVIDER_EVENTS = {\n  INITIALIZED: \"initialized\",\n  ERRORED: \"errored\"\n};\n\nfunction storageAvailable(type) {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage;\n\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    const _error = error;\n    return !!(_error && ( // everything except Firefox\n    _error.code === 22 || // Firefox\n    _error.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    _error.name === \"QuotaExceededError\" || // Firefox\n    _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storageExists && storageLength !== 0);\n  }\n}\nconst isHexStrict = hex => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n\nexport { ADAPTER_CATEGORY, ADAPTER_EVENTS, ADAPTER_NAMESPACES, ADAPTER_STATUS, BaseAdapter, CHAIN_NAMESPACES, DEFAULT_INFURA_ID, EVM_ADAPTERS, MULTI_CHAIN_ADAPTERS, PROVIDER_EVENTS, SOLANA_ADAPTERS, WALLET_ADAPTERS, WalletInitializationError, WalletLoginError, Web3AuthError, getChainConfig, getEvmChainConfig, getSolanaChainConfig, isHexStrict, storageAvailable };\n//# sourceMappingURL=base.esm.js.map\n",null,null,null,null,"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"],"sourceRoot":""}